@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BalanzaDigitalUg.Web.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar sesión</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <section class="shadow rounded p-4 bg-white">
                <h2 class="mb-4 text-center">Iniciar sesión</h2>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" />
                        <label for="Input.Email" class="form-label">Correo electrónico</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="contraseña" />
                        <label for="Input.Password" class="form-label">Contraseña</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="Input.RememberMe" />
                        <label class="form-check-label" for="Input.RememberMe">Recordarme</label>
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary mb-2">Ingresar</button>
                    <div class="d-flex flex-column gap-1 mt-3">
                        <a href="Account/ForgotPassword" class="text-decoration-none">¿Olvidaste tu contraseña?</a>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-decoration-none">Registrarse como nuevo usuario</a>
                        @* <a href="Account/ResendEmailConfirmation" class="text-decoration-none">Reenviar confirmación de correo</a> *@
                    </div>
                </EditForm>
            </section>
        </div>
        @* <div class="col-lg-4"> *@
        @*     <section class="shadow rounded p-4 bg-white mt-4 mt-lg-0"> *@
        @*         <h4 class="mb-3 text-center">Usar otro servicio para iniciar sesión</h4> *@
        @*         <hr /> *@
        @*         <ExternalLoginPicker /> *@
        @*     </section> *@
        @* </div> *@
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Limpiar la cookie externa para asegurar un login limpio
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario inició sesión.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("La cuenta de usuario está bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Intento de inicio de sesión inválido.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "¿Recordarme?")]
        public bool RememberMe { get; set; }
    }
}
